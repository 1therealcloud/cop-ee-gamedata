-- File:        UI_SAVE_DIALOG.SCRIPT
-- Description: Save Dialog for STALKER
-- Created:     27.9.2004
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Copyright:   2004 GSC Game World
-- Version:     1.0
-- Modified:    Serhiy Pryshchepa (peacemaker@gsc-game.kiev.ua)
local saved_game_extension = ui_load_dialog.saved_game_extension

class "save_item" (CUIListBoxItem)

function save_item:__init(height) super(height)
	self:SetTextColor	(GetARGB(255, 170, 170, 170))
	self.fn				= self:GetTextItem()
	self.fn:SetFont		(GetFontLetterica18All())
	self.fn:SetEllipsis	(true)
end

class "save_dialog" (CUIScriptWnd)

function save_dialog:__init() super()
	self.mm_is_controller = main_menu.in_controller_mode()
	self.loopInLists = true
	self.saved_files = {}

	if self.mm_is_controller then
		self.sndSwitch	= sound_object("interface\\console\\menu_switch")
		self.sndSelect	= sound_object("interface\\console\\menu_select")
		self.sndAccept	= sound_object("interface\\console\\menu_accept")
		self.sndDecline	= sound_object("interface\\console\\menu_decline")
	end

	self:InitControls	()
	self:InitCallBacks	()
	--self:FillList		()

	-- mtb-bartlomiej.kunikowski: [JUD-1270] Disable text edit field in save game dialog on PC for time being due to many problems with multibyte texts
	self:ResetFilenameInEditbox()

	if self.mm_is_controller then
		action_repeaters():Register(self, key_bindings.kUI_DOWN,0,0)
		action_repeaters():Register(self, key_bindings.kUI_UP,0,0)
	end
end

function save_dialog:__finalize()
	action_repeaters():UnregisterOwner(self)
end

function save_dialog:FillList()
	self.list_box:RemoveAll()
	self.saved_files = {}

	-- MTB-denys.hoida: [JP-110] Save System - Rework the save slot limit
	local flist = getFS():file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*"..saved_game_extension, true, true)
	local f_cnt = flist:Size()

	flist:Sort(FS.FS_sort_by_modif_down)

	-- mtb-bartlomiej.kunikowski: [JUD-1270] Disable text edit field in save game dialog on PC for time being due to many problems with multibyte texts
	self:AddItemToList("[" .. game.translate_string("ui_mmenu_new_savegame_utf8") .. "]", "")

	for	it=0, f_cnt-1 	do
		local file		=	flist:GetAt(it)
		
		-- mtb-bartlomiej.kunikowski Start: Get rid of file extensions from save names on PS4
		local file_name = nil
		local save_name = nil
		if get_platform_id() == platform_ids.PLATFORM_ORBIS or get_platform_id() == platform_ids.PLATFORM_PROSPERO then
			file_name = file:NameFull()
			save_name = file_name
		else
			save_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(saved_game_extension)))
			file_name = ui_load_dialog.read_file_info(save_name)
		end
		-- mtb-bartlomiej.kunikowski End
		
		local date_time = "[" .. file:ModifDigitOnly() .. "]"
		--menu_item =  ..
		self:AddItemToList(file_name, date_time)
		self.saved_files[file_name] = save_name
	end

	-- mtb-bartlomiej.kunikowski: [JUD-1270] Disable text edit field in save game dialog on PC for time being due to many problems with multibyte texts
	--and auto select the top one
	if self.list_box:GetSize() > 0 then
		self.list_box:SetSelectedIndex(0)
	end

	if self.mm_is_controller then
		self:UpdateInputLegend()
	end
end

function save_dialog:InitControls()
	self:SetWndRect(Frect():set(0,0,1024,768))

	self.list_file_font = GetFontMedium()
	self.list_date_font = GetFontMedium()

	local xml = CScriptXmlInit()
	if self.mm_is_controller then
		xml:ParseFile("ui_mm_save_dlg_c.xml")
	else
		xml:ParseFile("ui_mm_save_dlg.xml")
	end

	local ctrl

	-- MTB-michal.chudzik Start: Added one background video to GDK platforms
	 local platform = get_platform_id()
	if is_using_4k_movies() then -- MTB-anna.galach
		xml:InitStatic("background_4k", self)
    -- mtb-bartlomiej.kunikowski Start: On PS4 we have one background video
	elseif platform == platform_ids.PLATFORM_ORBIS or platform == platform_ids.PLATFORM_PROSPERO or platform == platform_ids.PLATFORM_GDK then
		xml:InitStatic("background_orbis", self)
	elseif platform == platform_ids.PLATFORM_GDK_1440 then
		xml:InitStatic("background_orbis", self)
	elseif platform == platform_ids.PLATFORM_GDK_4K then
		xml:InitStatic("background_orbis", self) --replace with 4k and 1440p videos when ready
	elseif platform == platform_ids.PLATFORM_NX64 then
	-- MTB-Damian.Romanik [JP2-102] Start: NX64 textures
		xml:InitStatic("background_nx64", self)
	-- MTB-Damian.Romanik [JP2-102] End: NX64 textures
    -- MTB-michal.chudzik End
	else
		xml:InitWindow("background", 0, self)
	end
	-- mtb-bartlomiej.kunikowski End

	ctrl							= CUIWindow()
	xml:InitWindow					("file_item:main", 0, ctrl)

	self.file_item_main_sz			= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	xml:InitWindow					("file_item:fn",0,ctrl)
	self.file_item_fn_sz			= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	xml:InitWindow					("file_item:fd",0,ctrl)
	self.file_item_fd_sz			= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())


	self.form = xml:InitStatic		("form", self)

	xml:InitTextWnd					("form:caption", self.form)

	if is_gaming_console() then
		self.editbox				= nil
	else
		self.editbox				= xml:InitEditBox("form:edit", self.form)
		self:Register					(self.editbox, "edit_filename")
	end

	xml:InitFrame					("form:list_frame", self.form)

	self.list_box = xml:InitListBox	("form:list", self.form)
	self.list_box:ShowSelectedItem	(true)
	self:Register					(self.list_box, "list_window")

	if not self.mm_is_controller or get_platform_id() == platform_ids.PLATFORM_NX64 then
		self.btn_save = xml:Init3tButton			("form:btn_save", self.form)
		self:Register					(self.btn_save, "button_ok")

		self.btn_delete = xml:Init3tButton			("form:btn_delete",	self.form)
		self:Register					(self.btn_delete, "button_del")

		self.btn_cancel = xml:Init3tButton			("form:btn_cancel",	self.form)
		self:Register					(self.btn_cancel, "button_cancel")
		if get_platform_id() == platform_ids.PLATFORM_NX64 then
			self.input_legend = xml:InitInputLegend("input_legend", self)
		end
	else
		self.input_legend = xml:InitInputLegend("input_legend", self)
	end

	self.message_box				= CUIMessageBoxEx()
	self:Register					(self.message_box,"message_box")

	self.mbox_mode					= 0
end

function save_dialog:InitCallBacks()

	if not self.mm_is_controller or (get_platform_id() == platform_ids.PLATFORM_NX64) then
    -- main frame buttons
		self:AddCallback("button_ok",		ui_events.BUTTON_CLICKED,			self.OnButton_ok_clicked,		self)
		self:AddCallback("button_cancel",	ui_events.BUTTON_CLICKED,			self.OnButton_cancel_clicked,	self)
		self:AddCallback("button_del",		ui_events.BUTTON_CLICKED,			self.OnButton_del_clicked,	self)
		self:AddCallback("list_window",		ui_events.LIST_ITEM_CLICKED,		self.OnListItemClicked,			self)

		if get_platform_id() == platform_ids.PLATFORM_NX64 then
			self:AddCallback("list_window", ui_events.LIST_ITEM_SELECT, 			self.OnListItemSelected,		self)
		end
	else
		self:AddCallback("list_window", ui_events.LIST_ITEM_SELECT, 			self.OnListItemSelected,		self)
	end

	self:AddCallback("message_box", ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,					self)
	self:AddCallback("message_box", ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,					self)
end

function save_dialog:OnListItemSelected()
	if self.list_box:GetSize()==0 then return end

	local item			= self.list_box:GetSelectedItem()

	if item==nil then return end

	-- mtb-bartlomiej.kunikowski: [JUD-1270] Disable text edit field in save game dialog on PC for time being due to many problems with multibyte texts
	local selectedIdx = self.list_box:GetSelectedIndex()

	if is_gaming_console() then
		if selectedIdx == 0 then
			self.new_save = self:GetNewSavegameName()
		else
			self.new_save = item.fn:GetText()
		end
	else
		-- mtb-jan.popiolkiewicz: [JP2-1530][Steam] Names of overwritten saves do not update
		-- if selectedIdx == 0 then
		-- 	self.editbox:SetText(self:GetNewSavegameName())
		-- else
		-- 	local item_text			= item.fn:GetText()
		-- 	self.editbox:SetText	(item_text)
		-- end
	end

	if self.mm_is_controller then
		-- when we select the [new game] listitem we cant delete it, so update legend
		self:UpdateInputLegend()
	end
end

function save_dialog:OnListItemClicked()
	if self.list_box:GetSize()==0 then return end

	if self.mm_is_controller then
		self.sndAccept:play(nil, 0.0, sound_object.s2d)
	end

	local item			= self.list_box:GetSelectedItem()

	if item==nil then return end

	local item_text	= item.fn:GetText()
	if is_gaming_console() then
		self.new_save = item_text
		print( "[MTB][lua][OnListItemClicked] self.new_save: " .. self.new_save )
	else
		-- mtb-bartlomiej.kunikowski: [JUD-1270] Disable text edit field in save game dialog on PC for time being due to many problems with multibyte texts
		-- mtb-jan.popiolkiewicz: [JP2-1530][Steam] Names of overwritten saves do not update
		-- local selectedIdx = self.list_box:GetSelectedIndex()
		-- if selectedIdx == 0 then
		-- 	self.editbox:SetText(self:GetNewSavegameName())
		-- else
		-- 	local item_text			= item.fn:GetText()
		-- 	self.editbox:SetText	(item_text)
		-- end
	end
end

function save_dialog:OnMsgYes()
	if self.mm_is_controller then
		self.sndAccept:play(nil, 0.0, sound_object.s2d)
	end
	if self.mbox_mode == 1 then
		self:SaveFile(self.new_save)

		self.owner:ShowDialog(true)
		self:HideDialog()
		self.owner:Show(true)

	elseif self.mbox_mode == 2 then
		self:delete_selected_file()

	elseif self.mbox_mode == 3 then
		-- mtb-jan.popiolkiewicz: [JP2-1063] Localization, location and time in the gamesave naming remain the same after rewriting the save
		self:delete_selected_file()
		self.list_box:SetSelectedIndex(0)
		self:save()
	end

end

function save_dialog:OnMsgNo()
	if self.mm_is_controller then
		self.sndDecline:play(nil, 0.0, sound_object.s2d)
	end
end

function save_dialog:OnButton_del_clicked()
	if self.list_box:GetSize()==0 then return end

	local item	= self.list_box:GetSelectedItem()
	if item == nil then return end

	-- mtb-bartlomiej.kunikowski: [JUD-1270] Disable text edit field in save game dialog on PC for time being due to many problems with multibyte texts
	if self.list_box:GetSelectedIndex() == 0 then
		-- cant delete [new_game] item
		return
	end
	if self.mm_is_controller then
		self.sndDecline:play(nil, 0.0, sound_object.s2d)
	end

	self.mbox_mode = 2
	self.message_box:InitMessageBox("message_box_delete_file_name")
	self.message_box:ShowDialog(true)
end

function save_dialog:delete_selected_file()
	if self.list_box:GetSize()==0 then return end

	local index		= self.list_box:GetSelectedIndex()

	local item		= self.list_box:GetSelectedItem()
	if item == nil then return end

	local filename			= item.fn:GetText()

	ui_load_dialog.delete_save_game(self.saved_files[filename])

	self.list_box:RemoveItem			(item)

	if self.mm_is_controller then
		local count = self.list_box:GetSize()
		if count > 0 then
			if index >= count then
				index = count - 1
				self.list_box:ScrollToEnd()
			end
			self.list_box:SetSelectedIndex(index)
		else
			self:UpdateInputLegend()
		end
	else
		self:OnListItemClicked()
	end
end

function save_dialog:OnButton_ok_clicked()

        -- free space check
        local selectedIdx = self.list_box:GetSelectedIndex()
        if selectedIdx == 0 then

            if is_full_savedata() then
		self.mbox_mode = 0
		self.message_box:InitMessageBox("message_box_savedata_full")
		self.message_box:ShowDialog(true)
		return
            end

        -- overwrite current save

		-- mtb-jan.popiolkiewicz: [JP2-1530][Steam] Names of overwritten saves do not update
        elseif selectedIdx > 0 then --  and is_ui_controller() -- [JUD-89][JakubJurek] Removed pop on PC

            self.mbox_mode = 3
            self.message_box:InitMessageBox("message_box_overwrite_save")
            self.message_box:ShowDialog(true)
            return

	end

        -- new save

        self:save()
end

function save_dialog:save()

	-- prepare message box

	if self.mm_is_controller then
		self.sndAccept:play(nil, 0.0, sound_object.s2d)
	end

	-- Get file name
	if is_gaming_console() then
		if self.new_save == nil then
			self.new_save = self:GetNewSavegameName()
		end
	else
		self.new_save = self.editbox:GetText()
	end
	print( "[MTB][lua][save] self.new_save: " .. self.new_save )

	-- check for empty name
	if string.len(self.new_save) == 0 then
		self.mbox_mode = 0
		self.message_box:InitMessageBox("message_box_empty_file_name")
		self.message_box:ShowDialog(true)
		return
	end

	-- mtb-jan.popiolkiewicz: [JP2-1530][Steam] Names of overwritten saves do not update
	-- if not is_ui_controller() then -- [JUD-89][JakubJurek] Removed second popup on saving
	-- 	-- check for match name
	-- 	local f = getFS()
	-- 	local flist = f:file_list_open("$game_saves$",FS.FS_ListFiles)
	-- 
	-- 	-- mtb-bartlomiej.kunikowski Start: Get rid of file extensions from save names on PS4
	-- 	local new_save_name = nil
	-- 	if get_platform_id() == platform_ids.PLATFORM_ORBIS or get_platform_id() == platform_ids.PLATFORM_PROSPERO then
	-- 		new_save_name = self.new_save
	-- 	else
	-- 		new_save_name = self.new_save .. saved_game_extension
	-- 	end
	-- 	-- mtb-bartlomiej.kunikowski End
	-- 
	-- 	local file_struct = f:exist("$game_saves$", new_save_name )
	-- 
	-- 	if file_struct ~= nil then
	-- 		self.mbox_mode = 1
	-- 		self.message_box:InitMessageBox("message_box_file_already_exist")
	-- 		self.message_box:ShowDialog(true)
	-- 
 	-- 		flist:Free()
	-- 		return
	-- 	end
	-- 	flist:Free()
	-- end

	self:SaveFile(self.new_save)

	self.owner:ShowDialog(true)
	self:HideDialog()
	self.owner:Show(true)

end


function save_dialog:OnButton_cancel_clicked()
	if self.mm_is_controller then
		self.sndDecline:play(nil, 0.0, sound_object.s2d)
	end
	self.owner:ShowDialog(true)
	self:HideDialog()
	self.owner:Show(true)
end

function save_dialog:OnKeyboard(dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if self.mm_is_controller then
			if is_binded(key_bindings.kUI_BACK, dik) then
				self:OnButton_cancel_clicked()
				return true

			elseif is_binded(key_bindings.kUI_ACCEPT, dik) then
				self:OnButton_ok_clicked()
				return true

			elseif is_binded(key_bindings.kUI_ACTION_1, dik) then
				self:OnButton_del_clicked()
				return true

			elseif is_binded(key_bindings.kUI_ACTION_2, dik) then
				--set name for the newsavegame
				self.list_box:SetSelectedIndex(-1)
				if is_gaming_console() == false then
					self.editbox:SetText(self:GetNewSavegameName())
				end
				return true

			elseif is_binded(key_bindings.kUI_DOWN, dik) then
				action_repeaters():SetActionStarted(self, key_bindings.kUI_DOWN)
				if not any_binded_key_for_action_pressed_c(key_bindings.kUI_UP) then
					self:SelectNext(1, true, true)
				end
				return true

			elseif is_binded(key_bindings.kUI_UP, dik) then
				action_repeaters():SetActionStarted(self, key_bindings.kUI_UP)
				if not any_binded_key_for_action_pressed_c(key_bindings.kUI_DOWN) then
					self:SelectNext(-1, true, true)
				end
				return true
			end
		else
			if is_binded(key_bindings.kQUIT, dik) then
				self:OnButton_cancel_clicked()
				return true
			else
				if dik == DIK_keys.DIK_RETURN then
					self:OnButton_ok_clicked()
					return true
				end
			end
		end
	end

	return CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
end

function save_dialog:OnKeyboardHold(dik)

	if self.mm_is_controller then
		if is_binded(key_bindings.kUI_DOWN, dik) then
			if action_repeaters():CanRepeatActionNow(self, key_bindings.kUI_DOWN)
			and not any_binded_key_for_action_pressed_c(key_bindings.kUI_UP) then
				self:SelectNext(1, false, true)
			end
			return true

		elseif is_binded(key_bindings.kUI_UP, dik) then
			if action_repeaters():CanRepeatActionNow(self, key_bindings.kUI_UP)
			and not any_binded_key_for_action_pressed_c(key_bindings.kUI_DOWN) then
				self:SelectNext(-1, false, true)
			end
			return true
		end
	end

	return CUIScriptWnd.OnKeyboardHold(self,dik)
end

function save_dialog:AddItemToList(file_name, date_time)
	local _itm			= save_item(self.file_item_main_sz.y)
	_itm:SetWndSize		(self.file_item_main_sz)

	_itm.fn:SetWndPos	(vector2():set(0,0))
	_itm.fn:SetWndSize	(self.file_item_fn_sz)
	_itm.fn:SetText		(file_name)

	_itm.fage			= _itm:AddTextField(date_time, self.file_item_fd_sz.x)
	_itm.fage:SetFont	(GetFontLetterica18All())
	_itm.fage:SetWndPos	(vector2():set(self.file_item_fn_sz.x+4, 0))

	self.list_box:AddExistingItem(_itm)
end

function save_dialog:SaveFile(fileName)
	if nil~= fileName then
		local console = get_console()
		console:execute("save " .. fileName)
	end
end

--a quick stub implementation, refactor, we should have a nice func for that in c++
function save_dialog:GetNewSavegameName()
	-- [JUD-24][Bartlomiej.Kordek]
	local save_name_prefix = game.translate_string("ui_mainmenu_manualsave_utf8")
	local save_base = game.translate_string(level.name().."_utf8")
	local dtime = game.get_game_time()

	local dateAsString = dtime:dateToString(game.CTime.DateToDay)
	local hourAsString = dtime:timeToString(game.CTime.TimeToSeconds)

	local save_name = save_name_prefix .. save_base .. " " .. dateAsString .. " " .. hourAsString
	save_name = save_name:gsub(",", " ")
	save_name = save_name:gsub(":", " ")
	save_name = save_name:gsub("/", " ")
	save_name = save_name:gsub("\\", " ")
	save_name = save_name:gsub("  ", " ")
	save_name = save_name:gsub("\"", "")
	
	return save_name
end

function save_dialog:SelectNext(offset, allowLoop, autoScroll)
	local itemCount = self.list_box:GetSize()
	if itemCount == 0 or itemCount == 1 then
		return false
	end

	local nextIndex = self.list_box:GetSelectedIndex()
	if nextIndex == index_for_not_found then
		nextIndex = 0
	else
		nextIndex = nextIndex + offset
		if nextIndex < 0 then
			if allowLoop then
				nextIndex = itemCount - 1
			else
				return false
			end
		elseif nextIndex >= itemCount then
			if allowLoop then
				nextIndex = 0
			else
				return false
			end
		end
	end

	if self.mm_is_controller then
		self.sndSwitch:play(nil, 0.0, sound_object.s2d)
	end

	self.list_box:SetSelectedIndex(nextIndex)

	if autoScroll then
		local scroll = self.list_box
		local lpos = scroll:GetMinScrollPos()
		local rpos = scroll:GetMaxScrollPos()
		local lrdif = (rpos - lpos)
		local elementParent = self.list_box:GetSelectedItem()
		if elementParent ~= nil then

			local ratio = elementParent:GetWndPos().y / scroll:GetPadSize().y

			local spos = lpos + lrdif * ratio - lrdif * (3 / itemCount)
			scroll:SetScrollPos(spos)
		end
	end

	return true
end

function save_dialog:ResetFilenameInEditbox()
	if is_gaming_console() == false then
		self.editbox:SetText(self:GetNewSavegameName())
	end
end

function save_dialog:UpdateInputLegend()
	self.input_legend:ClearAll()

	local numSaves = self.list_box:GetSize()
	local selectedIdx = self.list_box:GetSelectedIndex()

	--self.input_legend:AddItem('legend_ui_navigation_v', numSaves > 1)
	self.input_legend:AddItem('legend_ui_savegame_save', true)
	self.input_legend:AddItem('legend_ui_savegame_delete', numSaves > 1 and selectedIdx ~= 0)
	self.input_legend:AddItem('legend_ui_back', true)

	self.input_legend:UpdateText()
end

function save_dialog:OnTouchpadButtons()
	local shouldShow = not is_switch_in_TV()

	self.btn_save:Show(shouldShow)
	self.btn_delete:Show(shouldShow)
	self.btn_cancel:Show(shouldShow)
end